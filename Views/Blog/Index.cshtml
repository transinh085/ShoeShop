@model IEnumerable<ShoeShop.Models.Blog>;
@{
	ViewData["Title"] = "Blogs";
}
@section Styles {
	<link href="~/css/blog.css" rel="stylesheet">
	<link href="~/css/listing.css" rel="stylesheet">
}
@{
	var blog = ViewBag.Blogs as List<Blog>;
	var topics = ViewBag.Topics;
}

<main class="bg_gray">
	<div class="container margin_30">
		<div class="page_header">
			<div class="breadcrumbs">
				<ul>
					<li><a href="#">Home</a></li>
					<li><a href="#">Topic</a></li>
					<li>Page active</li>
				</ul>
			</div>
			<h1>Allaia Blog &amp; News</h1>
		</div>
		<!-- /page_header -->
		<div class="row">
			<div class="col-lg-9">
				@* <div class="widget search_blog d-block d-sm-block d-md-block d-lg-none">
					<div class="form-group">
						<input type="text" name="search" id="search" class="form-control" placeholder="Search..">
						<button type="submit"><i class="ti-search"></i></button>
					</div>
				</div> *@
				<!-- /widget -->
				 <div class="row" id="posts">
					<!-- /col -->
				</div>
				<!-- /row -->


				<!-- /pagination -->

			</div>
			<!-- /col -->

			<aside class="col-lg-3">
				<div class="widget search_blog d-none d-sm-none d-md-none d-lg-block">
					<div class="form-group">
						<input type="text" name="search" id="search_blog" class="form-control" placeholder="Search..">
						<button type="submit"><i class="ti-search"></i></button>
					</div>
				</div>
				<!-- /widget -->
				<div class="filter_type version_2">
					<h4><a href="#topics" data-bs-toggle="collapse" class="opened">Topics</a></h4>
					<div class="collapse show" id="topics">
						<ul>
							@if (topics != null)
							{
								foreach (var topic in topics)
								{
									<li>
										<label class="container_check">
											@topic.Topic.Name <small>@topic.blogCount</small>
											<input type="checkbox" name="topics" value="@topic.Topic.Id">
											<span class="checkmark"></span>
										</label>
									</li>
								}
							}
						</ul>
					</div>
					<!-- /filter_type -->
				</div>
				</div>
			
				<!-- /widget -->
			</aside>
			<!-- /aside -->
		</div>
	<div class="col-lg-9">
		<div class="row small-gutters" id="products">
		</div>
		<!-- /row -->
		<div class="pagination__wrapper">
			<ul class="pagination">
			</ul>
		</div>
	</div>
		<!-- /row -->
	 </div> 
	<!-- /container -->
</main>

@section Scripts{
	<script src="~/js/sticky_sidebar.min.js"></script>
	<script>
		var currentPage = null;
		var totalPage = null;
		document.addEventListener("DOMContentLoaded", function () {
			const topicsCheckboxes = document.querySelectorAll("input[name=topics]");
			const inputSearch = document.getElementById("search_blog");


			// Add a flag to prevent infinite loop
			let updatingURL = false;

			function updateURL() {
				if (!updatingURL) {
					updatingURL = true;
					const checkedTopics = getCheckedValues(topicsCheckboxes);
					

					const queryParams = [];

					if (checkedTopics.length > 0) {
						queryParams.push(`topics=${checkedTopics.join(",")}`);
					}
					

					//queryParams.push(`sort=${sortSelect.value}`);
					if (inputSearch.value.length > 0) {
						queryParams.push(`query=${inputSearch.value}`);
					}

					const urlParams = new URLSearchParams(window.location.search);
					const pageParam = urlParams.get("page");
					if (pageParam) {
						queryParams.push(`page=1`);
					}

					const url = window.location.href.split('?')[0];
					const finalURL = queryParams.length > 0 ? `${url}?${queryParams.join("&")}` : url;

					history.replaceState(null, null, finalURL);

					// Now, update the checkboxes based on the URL parameters
					updateFromURLParameters();
					updatingURL = false; // Reset the flag
					fetchData()
				}
			}

			function getQueryParamString() {
				var url = new URL(window.location.href);
				return url.search || '';
			}

			function fetchData() {
				const queryParams = getQueryParamString();
				const urlFetch = "/Blog/getallblogs" + (queryParams.length > 0 ? queryParams : '');
				$.ajax({
					url: urlFetch,
					method: "get",
					dataType: "json",
					success: function (response) {
						currentPage = response.CurrentPage;
						totalPage = response.TotalPages;
						let html = ``;
						response?.Result.forEach(blog => {
							const time = new Date(blog.CreatedAt).toLocaleDateString();
							html += `<div class="col-md-6">
								<article class="blog">
											<figure >
												<a href="/blogs/${blog.Slug}" >
													<img src="/img/blogs/${blog.Thumbnail.Name}" alt=""">
											<div class="preview"><span>Read more</span></div>
										</a>
									</figure>
									<div class="post_info">
												<small>${blog.Topic.Name} - ${time}</small>
												<h2><a href="/blogs/${blog.Slug}">${blog.Name}</a></h2>
										<p>${blog.Description}</p>
										<ul>
											<li>
														<div class="thumb" style="width=40px; height:40px; display:inline-block;"><img  src="${blog.User.ProfileImageUrl}"alt=""></div>${blog.User.FullName}
											</li>
											<li>
											</li>
										</ul>
									</div>
								</article>
								<!-- /article -->
							</div>`

						})
						document.getElementById("posts").innerHTML = html
						if (response?.Result.length != 0) {
							let pagiantonNode = ``;
							for (let i = 1; i <= response?.TotalPages; i++) {
								pagiantonNode += `<li>
												<a href="#0" data-id="${i}" class="${i == response?.CurrentPage ? "active" : ""}">${i}</a>
											</li>`;
							}

							let paginationHtml = `<li>
													<a href="#0" class="prev-page" title="previous page">&#10094;</a>
												</li>
													${pagiantonNode}
												<li>
													<a href="#0" class="next-page" title="next page">&#10095;</a>
												</li>`;
							document.querySelector(".pagination").innerHTML = paginationHtml
						} else if (response?.Result.length === 0) {
							document.getElementById("posts").innerHTML = `<h2>Not found posts</h2><img class="img-fluid lazy loaded" src="img/not-found-post.webp" alt="Not found posts" data-was-processed="true">`
						}
					},
					error: function (err) {
						console.error(err.responseText);
					},
				});
			}

			$(document).on('click', '.pagination a', function (e) {
				e.preventDefault();
				if (this.classList.contains("prev-page")) {
					if (currentPage == 1) return
					else {
						currentPage--;
						updateUrlParameter('page', currentPage || '1');
						// Gọi lại hàm fetchData với trang mới
						fetchData();
					}
				} else if (this.classList.contains("next-page")) {
					if (currentPage == totalPage) return
					else {
						currentPage++;
						updateUrlParameter('page', currentPage || '1');
						// Gọi lại hàm fetchData với trang mới
						fetchData();
					}
				} else {
					// Lấy giá trị của id từ thuộc tính data-id
					const pageId = $(this).data('id');

					// Cập nhật tham số 'page' trong URL bằng giá trị id hoặc thêm nếu chưa có
					updateUrlParameter('page', pageId || '1');
					// Gọi lại hàm fetchData với trang mới
					fetchData();
				}
			});

			function updateUrlParameter(key, value) {
				let url = window.location.href;
				let newUrl;

				// Kiểm tra xem tham số 'page' đã tồn tại trong URL chưa
				if (url.includes(`${key}=`)) {
					// Thay thế giá trị của tham số 'page'
					newUrl = url.replace(new RegExp(`(${key}=\\d+)`), `${key}=${value}`);
				} else {
					// Thêm tham số 'page' vào URL
					const separator = url.includes('?') ? '&' : '?';
					newUrl = `${url}${separator}${key}=${value}`;
				}

				history.replaceState(null, null, newUrl);
			}

			function getCheckedValues(checkboxes) {
				return Array.from(checkboxes)
					.filter(checkbox => checkbox.checked)
					.map(checkbox => checkbox.value);
			}

			function updateFromURLParameters() {
				const urlParams = new URLSearchParams(window.location.search);
				topicsCheckboxes.forEach(checkbox => {
					checkbox.checked = urlParams.get("topics")?.split(",").includes(checkbox.value);
				});
				

				
				const inputSearchParam = urlParams.get("query");
				if (inputSearchParam) inputSearch.value = inputSearchParam;

				fetchData();
			}

			topicsCheckboxes.forEach(checkbox => {
				checkbox.addEventListener("change", updateURL);
			});


			

			inputSearch.addEventListener("change", updateURL);


			// Call these functions to initialize the checkboxes and sort select based on URL parameters
			updateFromURLParameters();

			$("#reset").on("click", () => {
				const urlWithoutSearch = window.location.href.split('?')[0];
				history.replaceState(null, null, urlWithoutSearch);
				fetchData();
				updateFromURLParameters();
			})
		});
	</script>
}