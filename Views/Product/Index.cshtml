@model IEnumerable<ShoeShop.Models.Product>
@{
	ViewData["Title"] = "Products";
}
@section Styles {
	<link href="~/css/listing.css" rel="stylesheet">
}

@{
	var categories = ViewBag.Categories;
	var brands = ViewBag.Brands;
	var products = ViewBag.Products as List<Product>;
	var colors = ViewBag.Colors;
	var sizes = ViewBag.Sizes;
	var priceRanges = ViewBag.PriceRanges;
}

<main>
	<div class="top_banner">
		<div class="opacity-mask d-flex align-items-center" data-opacity-mask="rgba(0, 0, 0, 0.3)">
			<div class="container">
				<div class="breadcrumbs">
					<ul>
						<li><a href="#">Home</a></li>
						<li>Products</li>
					</ul>
				</div>
				<h1>Products</h1>
			</div>
		</div>
		<img src="~/img/bg_cat_shoes.jpg" class="img-fluid" alt="">
	</div>
	<!-- /top_banner -->
	<div id="stick_here"></div>
	<div class="toolbox elemento_stick">
		<div class="container">
			<ul class="clearfix">
				<li>
					<div class="sort_select">
						<select name="sort" id="sort">
							<option value="date" selected="selected">Sort by newness</option>
							<option value="price">Sort by price: low to high</option>
							<option value="price-desc">Sort by price: high to</option>
						</select>
					</div>
				</li>
				<li>
					<a href="#0"><i class="ti-view-grid"></i></a>
					<a href="listing-row-1-sidebar-left.html"><i class="ti-view-list"></i></a>
				</li>
				<li>
					<a href="#0" class="open_filters">
						<i class="ti-filter"></i><span>Filters</span>
					</a>
				</li>
			</ul>
		</div>
	</div>
	<!-- /toolbox -->

	<div class="container margin_30">

		<div class="row">
			<aside class="col-lg-3" id="sidebar_fixed">
				<div class="filter_col">
					<div class="inner_bt"><a href="#" class="open_filters"><i class="ti-close"></i></a></div>
					<div class="filter_type version_2">
						<h4><a href="#categories" data-bs-toggle="collapse" class="opened">Categories</a></h4>
						<div class="collapse show" id="categories">
							<ul>
								@if (categories != null)
								{
									foreach (var category in categories)
									{
										<li>
											<label class="container_check">
												@category.Category.Name <small>@category.ProductCount</small>
												<input type="checkbox" name="categories" value="@category.Category.Id">
												<span class="checkmark"></span>
											</label>
										</li>
									}
								}
							</ul>
						</div>
						<!-- /filter_type -->
					</div>
					<!-- /filter_type -->
					<div class="filter_type version_2">
						<h4><a href="#colors" data-bs-toggle="collapse" class="opened">Colors</a></h4>
						<div class="collapse show" id="colors">
							<ul>
								@if (colors != null)
								{
									foreach (var color in colors)
									{
										<li>
											<label class="container_check">
												@color.Color.Name <small>@color.ProductCount</small>
												<input type="checkbox" name="colors" value="@color.Color.Id">
												<span class="checkmark"></span>
											</label>
										</li>
									}
								}
							</ul>

						</div>
					</div>
					<!-- /filter_type -->
					<div class="filter_type version_2">
						<h4><a href="#lbrands" data-bs-toggle="collapse" class="closed">Brands</a></h4>
						<div class="collapse" id="lbrands">
							<ul>
								@if (brands != null)
								{
									foreach (var brand in brands)
									{
										<li>
											<label class="container_check">
												@brand.Brand.Name <small>@brand.ProductCount</small>
												<input type="checkbox" name="brands" value="@brand.Brand.Id">
												<span class="checkmark"></span>
											</label>
										</li>
									}
								}
							</ul>
						</div>
					</div>
					<!-- /filter_type -->
					<div class="filter_type version_2">
						<h4><a href="#sizes" data-bs-toggle="collapse" class="closed">Sizes</a></h4>
						<div class="collapse" id="sizes">
							<ul>
								@if (sizes != null)
								{
									foreach (var size in sizes)
									{
										<li>
											<label class="container_check">
												@size.Size.Name <small>@size.ProductCount</small>
												<input type="checkbox" name="sizes" value="@size.Size.Id">
												<span class="checkmark"></span>
											</label>
										</li>
									}
								}
							</ul>
						</div>
					</div>
					<!-- /filter_type -->
					<div class="filter_type version_2">
						<h4><a href="#filter_4" data-bs-toggle="collapse" class="closed">Price</a></h4>
						<div class="collapse" id="filter_4">
							<ul>
								@if (priceRanges != null)
								{
									foreach (var priceRange in priceRanges)
									{
										<li>
											<label class="container_check">
												@priceRange.Name<small>@priceRange.ProductCount</small>
												<input type="checkbox" value="@priceRange.Value" name="prices">
												<span class="checkmark"></span>
											</label>
										</li>
									}
								}
							</ul>
						</div>
					</div>
					<!-- /filter_type -->
					<div class="buttons">
						<button id="reset" class="btn_1">Reset</button>
					</div>
				</div>
			</aside>
			<!-- /col -->
			<div class="col-lg-9">
				<div class="row small-gutters" id="products">
				</div>
				<!-- /row -->
				<div class="pagination__wrapper">
					<ul class="pagination">
						
					</ul>
				</div>
			</div>
			<!-- /col -->
		</div>
		<!-- /row -->

	</div>
	<!-- /container -->
</main>

@section Scripts {
	<script src="~/js/sticky_sidebar.min.js"></script>
	<script src="~/js/specific_listing.js"></script>
	<script>
		var currentPage = null;
		var totalPage = null;
		document.addEventListener("DOMContentLoaded", function () {
			const categoriesCheckboxes = document.querySelectorAll("input[name=categories]");
			const colorsCheckboxes = document.querySelectorAll("input[name=colors]");
			const brandsCheckboxes = document.querySelectorAll("input[name=brands]");
			const sizesCheckboxes = document.querySelectorAll("input[name=sizes]");
			const pricesCheckboxes = document.querySelectorAll("input[name=prices]");
			const sortSelect = document.getElementById("sort");
			const inputSearch = document.getElementById("search-input");

			// Add a flag to prevent infinite loop
			let updatingURL = false;

			function updateURL() {
				if (!updatingURL) {
					updatingURL = true;
					const checkedCategories = getCheckedValues(categoriesCheckboxes);
					const checkedColors = getCheckedValues(colorsCheckboxes);
					const checkedBrands = getCheckedValues(brandsCheckboxes);
					const checkedSizes = getCheckedValues(sizesCheckboxes);
					const checkedPrices = getCheckedValues(pricesCheckboxes);

					const queryParams = [];

					if (checkedCategories.length > 0) {
						queryParams.push(`categories=${checkedCategories.join(",")}`);
					}
					if (checkedColors.length > 0) {
						queryParams.push(`colors=${checkedColors.join(",")}`);
					}
					if (checkedBrands.length > 0) {
						queryParams.push(`brands=${checkedBrands.join(",")}`);
					}
					if (checkedSizes.length > 0) {
						queryParams.push(`sizes=${checkedSizes.join(",")}`);
					}
					if (checkedPrices.length > 0) {
						queryParams.push(`prices=${checkedPrices.join(",")}`);
					}

					queryParams.push(`sort=${sortSelect.value}`);
					if (inputSearch.value.length > 0) {
						queryParams.push(`query=${inputSearch.value}`);
					}

					const urlParams = new URLSearchParams(window.location.search);
					const pageParam = urlParams.get("page");
					if (pageParam) {
						queryParams.push(`page=1`);
					}

					const url = window.location.href.split('?')[0];
					const finalURL = queryParams.length > 0 ? `${url}?${queryParams.join("&")}` : url;

					history.replaceState(null, null, finalURL);

					// Now, update the checkboxes based on the URL parameters
					updateFromURLParameters();
					updatingURL = false; // Reset the flag
					fetchData()
				}
			}

			function getQueryParamString() {
				var url = new URL(window.location.href);
				return url.search || '';
			}

			function getLabel(product) {
				if (product.PriceSale !== 0) {
					var roundedPercentage = 100 - Math.round((product.PriceSale / product.Price) * 100);
					return '<span class="ribbon off">-' + roundedPercentage + '%</span>';
				} else {
					if (product.Label === 1) {
						return '<span class="ribbon new">New</span>';
					} else if (product.Label === 2) {
						return '<span class="ribbon hot">Hot</span>';
					}
				}
				return '';
			}

			function fetchData() {
				const queryParams = getQueryParamString();
				const urlFetch = "/Product/allProducts" + (queryParams.length > 0 ? queryParams : '');
				$.ajax({
					url: urlFetch,
					method: "get",
					dataType: "json",
					success: function (response) {
						currentPage = response.CurrentPage;
						totalPage = response.TotalPages;
						let html = ``;
						response?.Result.forEach(product => {
							html += `<div class="col-6 col-md-4">
									<div class="grid_item">
												${getLabel(product)}
										<figure>
											<a href="/products/${product.Slug}">
											<img class="img-fluid lazy loaded" src="img/products/${product.Thumbnail.Name}" alt="${product.name}" data-was-processed="true">
											</a>
										</figure>
												<div class="rating"><i class="icon-star voted"></i><i class="icon-star voted"></i><i class="icon-star voted"></i><i class="icon-star voted"></i><i class="icon-star voted"></i></div>
											<a href="/products/${product.Slug}">
											<h3>${product.Name}</h3>
										</a>
										<div class="price_box">
											${product.PriceSale !== 0 ? `<span class="new_price">$${product.PriceSale.toFixed(2)}</span> <span class="old_price">$${product.Price.toFixed(2)}</span>` : `<span class="new_price">$${product.Price.toFixed(2)}</span>`}
										</div>
									</div>
								</div>`
						})
						document.getElementById("products").innerHTML = html
						if (response?.Result.length != 0) {
							let pagiantonNode = ``;
							for (let i = 1; i <= response?.TotalPages; i++) {
								pagiantonNode += `<li>
										<a href="#0" data-id="${i}" class="${i == response?.CurrentPage ? "active" : ""}">${i}</a>
									</li>`;
							}

							let paginationHtml = `<li>
											<a href="#0" class="prev-page" title="previous page">&#10094;</a>
										</li>
											${pagiantonNode}
										<li>
											<a href="#0" class="next-page" title="next page">&#10095;</a>
										</li>`;
							document.querySelector(".pagination").innerHTML = paginationHtml
						} else if (response?.Result.length === 0) {
							document.querySelector(".pagination").innerHTML = `<h2>Not found products</h2><img class="img-fluid lazy loaded" src="img/notfoundProduct.png" alt="Not found product" data-was-processed="true">`
						}
					},
					error: function (err) {
						console.error(err.responseText);
					},
				});
			}

			$(document).on('click', '.pagination a', function (e) {
				e.preventDefault();
				if (this.classList.contains("prev-page")) {
					if (currentPage == 1) return 
					else {
						currentPage--;
						updateUrlParameter('page', currentPage || '1');
						// Gọi lại hàm fetchData với trang mới
						fetchData();
					}
				} else if (this.classList.contains("next-page")) {
					if (currentPage == totalPage) return
					else {
						currentPage++;
						updateUrlParameter('page', currentPage || '1');
						// Gọi lại hàm fetchData với trang mới
						fetchData();
					}
				} else {
					// Lấy giá trị của id từ thuộc tính data-id
					const pageId = $(this).data('id');

					// Cập nhật tham số 'page' trong URL bằng giá trị id hoặc thêm nếu chưa có
					updateUrlParameter('page', pageId || '1');
					// Gọi lại hàm fetchData với trang mới
					fetchData();
				}
				$('html, body').animate({
					scrollTop: $("#stick_here").offset().top
				}, 0);
			});

			function updateUrlParameter(key, value) {
				let url = window.location.href;
				let newUrl;

				// Kiểm tra xem tham số 'page' đã tồn tại trong URL chưa
				if (url.includes(`${key}=`)) {
					// Thay thế giá trị của tham số 'page'
					newUrl = url.replace(new RegExp(`(${key}=\\d+)`), `${key}=${value}`);
				} else {
					// Thêm tham số 'page' vào URL
					const separator = url.includes('?') ? '&' : '?';
					newUrl = `${url}${separator}${key}=${value}`;
				}

				history.replaceState(null, null, newUrl);
			}

			function getCheckedValues(checkboxes) {
				return Array.from(checkboxes)
					.filter(checkbox => checkbox.checked)
					.map(checkbox => checkbox.value);
			}

			function updateFromURLParameters() {
				const urlParams = new URLSearchParams(window.location.search);
				categoriesCheckboxes.forEach(checkbox => {
					checkbox.checked = urlParams.get("categories")?.split(",").includes(checkbox.value);
				});
				colorsCheckboxes.forEach(checkbox => {
					checkbox.checked = urlParams.get("colors")?.split(",").includes(checkbox.value);
				});
				brandsCheckboxes.forEach(checkbox => {
					checkbox.checked = urlParams.get("brands")?.split(",").includes(checkbox.value);
				});
				sizesCheckboxes.forEach(checkbox => {
					checkbox.checked = urlParams.get("sizes")?.split(",").includes(checkbox.value);
				});
				pricesCheckboxes.forEach(checkbox => {
					checkbox.checked = urlParams.get("prices")?.split(",").includes(checkbox.value);
				});

				const sortParam = urlParams.get("sort");

				// Set the selected value of the sort select based on the 'sort' parameter
				if (sortParam && sortSelect.querySelector(`option[value="${sortParam}"]`)) {
					sortSelect.value = sortParam;
				} else {
					// If the value is not in the select options, set default to "date"
					sortSelect.value = "date";
				}

				const inputSearchParam = urlParams.get("query");
				if (inputSearchParam) inputSearch.value = inputSearchParam;

				fetchData();
			}

			categoriesCheckboxes.forEach(checkbox => {
				checkbox.addEventListener("change", updateURL);
			});

			colorsCheckboxes.forEach(checkbox => {
				checkbox.addEventListener("change", updateURL);
			});

			brandsCheckboxes.forEach(checkbox => {
				checkbox.addEventListener("change", updateURL);
			});

			sizesCheckboxes.forEach(checkbox => {
				checkbox.addEventListener("change", updateURL);
			});

			pricesCheckboxes.forEach(checkbox => {
				checkbox.addEventListener("change", updateURL);
			});

			// Add event listener for the 'change' event on the sort select element
			sortSelect.addEventListener("change", updateURL);

			inputSearch.addEventListener("change", updateURL);


			// Call these functions to initialize the checkboxes and sort select based on URL parameters
			updateFromURLParameters();

			$("#reset").on("click", () => {
				const urlWithoutSearch = window.location.href.split('?')[0];
				history.replaceState(null, null, urlWithoutSearch);
				fetchData();
				updateFromURLParameters();
			})
		});
	</script>
}
